In this lesson, you created a middleware function called asyncWrapper. Why?
Ans:
Because we are using async operations and the try and catch block in our every controller,
so to make it efficient we need to create a middleware function that essentially will wrap the controllers
where we will just set up the functionality where we don't have to repeat ourselves.

Suppose that you want to make sure that both a status code and and error message are send back to the user when they request 
the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler 
that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    // your code here//
    return next(createCustomError(`Task with id : ${taskID} is not available`, 404));
  }
  res.status(200).json({ task });
});
